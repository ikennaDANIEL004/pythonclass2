programming
programm


version control system - 
keyboard shortcut - 



classifications
1: how they are run
compiler
interpriter 


2: how they model
    oopm- object 

majesty




Absolutely, Daniel! Let's dive into the world of **data types in Python**—they're the building blocks of any program. Python is dynamically typed, meaning you don’t need to declare a variable’s type explicitly—it figures it out on its own. But knowing the types is key to writing clean, bug-free code.

---

## 🧠 **Core Data Types in Python**

### 🔢 Numeric Types
- **`int`**: Integer numbers (e.g., `5`, `-42`, `1000`)
- **`float`**: Floating-point numbers (e.g., `3.14`, `-0.001`)
- **`complex`**: Complex numbers (e.g., `2 + 3j`)

### 📜 Text Type
- **`str`**: String of characters (e.g., `"hello"`, `'Python 3.11'`)

### ✅ Boolean Type
- **`bool`**: Logical values: `True` or `False`

---

## 📦 **Collection Data Types**

| Type       | Description                                 | Example                          |
|------------|---------------------------------------------|----------------------------------|
| `list`     | Ordered, mutable sequence                   | `[1, 2, 3]`                      |
| `tuple`    | Ordered, immutable sequence                 | `(1, 2, 3)`                      |
| `set`      | Unordered, unique elements                  | `{1, 2, 3}`                      |
| `frozenset`| Immutable version of a set                  | `frozenset([1, 2, 3])`          |
| `dict`     | Key-value pairs                             | `{"name": "Daniel", "age": 25}` |

---

## 🧪 **Special Types**

- **`NoneType`**: Represents the absence of a value. Only one object: `None`
- **`bytes`**: Immutable sequence of bytes (e.g., `b'hello'`)
- **`bytearray`**: Mutable sequence of bytes
- **`memoryview`**: Memory view object for handling binary data efficiently

---

## 🧰 Type Conversion

Python makes it easy to convert between types:
```python
int("42")        # Converts string to integer
str(3.14)        # Converts float to string
list("hello")    # Converts string to list of characters
```

---

## 🔍 Type Checking

You can check or compare types using:
```python
type(x)          # Returns the type of x
isinstance(x, int)  # Checks if x is an integer
```

---

## 🧠 Pro Tip

Want to see all built-in types? Try this:
```python
import builtins
print(dir(builtins))
```

---

Would you like to explore **custom data types**, **type hints**, or how Python handles types under the hood? Or maybe dive into how types behave differently in Python compared to other languages?



my name is




Data types
primitive data types \\ non primitive datatypes 
x = 